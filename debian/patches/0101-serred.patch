--- a/ocaml/xenops/OMakefile
+++ b/ocaml/xenops/OMakefile
@@ -10,7 +10,7 @@
 OCAMLPACKS     = threads xenctrl xenstore stdext log cdrom netdev # xenlight
 OCAMLFLAGS    += -thread
 
-LIBFILES = table xenops_helpers xenbus_utils balloon xenguestHelper domain hotplug device io statdev xal netman memory watch device_common squeeze squeeze_xen squeezed_rpc squeezed_state squeezed_rpc device_number stubdom
+LIBFILES = table xenops_helpers xenbus_utils balloon xenguestHelper domain hotplug device io statdev xal netman memory watch device_common squeeze squeeze_xen squeezed_rpc squeezed_state squeezed_rpc device_number stubdom serrerd_rpc
 
 StaticCLibrary(statdev_stubs, statdev_stubs)
 OCamlLibraryClib(xenops, $(LIBFILES), statdev_stubs)
@@ -24,6 +24,7 @@
 OCamlProgram(memory_summary, memory_summary)
 OCamlProgram(freemem, freemem)
 OCamlProgram(squeezed, squeezed)
+OCamlProgram(serrerd, serrerd)
 OCamlDocProgram(squeezed, squeezed)
 OCamlProgram(squeezed_client, squeezed_client)
 
@@ -59,7 +60,7 @@
 BIN_PROGS=list_domains squeezed_client
 DEBUG_PROGS=xs xal xenops watch_test memory_breakdown memory_summary
 SYMLINK_PROGS=destroy_domain shutdown_domain create_domain build_domain build_hvm add_vbd add_vif unpause_domain pause_domain suspend_domain restore_domain
-OTHER_PROGS=fence dbgring squeezed
+OTHER_PROGS=fence dbgring squeezed serrerd
 
 .PHONY: allxenops
 allxenops: $(DEBUG_PROGS) $(BIN_PROGS) $(OTHER_PROGS)
@@ -75,6 +76,7 @@
 	$(IPROG) fence $(DESTDIR)$(LIBEXECDIR)/fence.bin
 	mkdir -p $(DESTDIR)$(LIBEXECDIR)
 	$(IPROG) squeezed $(DESTDIR)$(LIBEXECDIR)
+	$(IPROG) serrerd $(DESTDIR)$(LIBEXECDIR)
 
 .PHONY: sdk-install
 sdk-install: install
--- /dev/null
+++ b/ocaml/xenops/serrerd.ml
@@ -0,0 +1,262 @@
+(*
+ * Copyright (C) 2006-2009 Citrix Systems Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published
+ * by the Free Software Foundation; version 2.1 only. with the special
+ * exception on linking described in file LICENSE.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License for more details.
+ *)
+let default_pidfile = "/var/run/serrerd.pid" 
+let log_file_path = "file:/var/log/xcp-serrerd.log" 
+
+open Pervasiveext 
+open Serrerd_rpc
+open Squeezed_state
+open Xenops_helpers
+open Xenstore
+
+(* We assume only one instance of a named service logs in at a time and therefore can use
+   the service name as a session_id. *)
+
+(* val login: service -> session_id *)
+let login args = 
+  debug "Inside login function";
+  if not(List.mem_assoc _service_name args)
+  then [ _code, _error_missing_argument_code; _description, _service_name ]
+  else begin
+    let service_name = List.assoc _service_name args in
+    Debug.with_thread_associated (Printf.sprintf "login(%s)" service_name)
+      (fun () ->
+	 (* remove any existing reservations associated with this service *)
+	 with_xc_and_xs
+	   (fun xc xs ->
+	      xs.Xs.rm (state_path _service ^ "/" ^ service_name)
+	   )
+      ) ();
+    [ _session_id, service_name ]
+  end
+
+let handle_memory_errors f = 
+  try
+    f ()
+  with
+  | Squeeze.Cannot_free_this_much_memory (needed, free) ->
+      (* NB both needed and free have been inflated by the lowmem_emergency_pool etc *)
+      let needed = Int64.sub needed Squeeze_xen.target_host_free_mem_kib 
+      and free = Int64.sub free Squeeze_xen.target_host_free_mem_kib in
+      [ _code, _error_cannot_free_this_much_memory_code; _description, Printf.sprintf "%Ld,%Ld" needed free ]
+  | Squeeze.Domains_refused_to_cooperate domids ->
+      [ _code, _error_domains_refused_to_cooperate_code; _description, String.concat "," (List.map string_of_int domids) ]
+
+(* val reserve_memory: session_id -> kib -> reservation_id *)
+let reserve_memory args = 
+  if not(List.mem_assoc _session_id args)
+  then [ _code, _error_missing_argument_code; _description, _session_id ]
+  else if not(List.mem_assoc _kib args)
+  then [ _code, _error_missing_argument_code; _description, _kib ]
+  else begin
+    let kib = Int64.of_string (List.assoc _kib args) in
+    if kib < 0L
+    then [ _code, _error_invalid_memory_value; _description, _kib ]
+    else
+      let session_id = List.assoc _session_id args in
+      let reservation_id = Uuid.string_of_uuid (Uuid.make_uuid ()) in
+      handle_memory_errors
+	(fun () ->
+	   Debug.with_thread_associated (Printf.sprintf "reserve_memory(%s, %Ld)" session_id kib)
+	     (fun () ->
+		with_xc_and_xs
+		  (fun xc xs ->
+                    debug "using new version of reserve_memory";
+(*	     with_xc_and_xs
+	       (fun xc xs ->
+		 let kib = xs.Xs.read (reservation_path _service session_id reservation_id) in
+                 let xs = Squeezed_state.list_reservations xs _service in
+                 let xs = List.map (fun lst -> "[ " ^ (String.concat ";" lst) ^ " ]") xs in
+                 debug "\nall reservations: [ %s ]\n" (String.concat "; " xs);
+                 []
+	       )        *)     
+		     if Squeeze_xen.force_free_memory ~xc ~xs kib  then begin
+		       debug "reserved %Ld kib for reservation %s" kib reservation_id;
+		       add_reservation xs _service session_id reservation_id (Int64.to_string kib);
+	               [ _reservation_id, reservation_id ]
+                     end else begin
+                       debug "Can't forcely reserve memory. There is no enough.";
+                       [ _code, "can't free memory"; _description, "There is no enough" ]
+                     end
+		  )
+	     ) ()
+	)
+  end
+
+(* val reserve_memory_range: session_id -> min -> max -> reservation_id *)
+let reserve_memory_range args = 
+  if not(List.mem_assoc _session_id args)
+  then [ _code, _error_missing_argument_code; _description, _session_id ]
+  else if not(List.mem_assoc _min args)
+  then [ _code, _error_missing_argument_code; _description, _min ]
+  else if not(List.mem_assoc _max args)
+  then [ _code, _error_missing_argument_code; _description, _max ]
+  else begin
+    let session_id = List.assoc _session_id args in
+    let min = Int64.of_string (List.assoc _min args) in
+    let max = Int64.of_string (List.assoc _max args) in
+    let reservation_id = Uuid.string_of_uuid (Uuid.make_uuid ()) in
+    if min < 0L 
+    then [ _code, _error_invalid_memory_value; _description, _min ]
+    else 
+      if max < 0L
+      then [ _code, _error_invalid_memory_value; _description, _max ]
+      else 
+	if max < min
+	then [ _code, _error_invalid_memory_value; _description, _min ]
+	else
+	  handle_memory_errors
+	    (fun () ->
+	       Debug.with_thread_associated (Printf.sprintf "reserve_memory_range(%s, %Ld, %Ld)" session_id min max)
+		 (fun () ->
+		    with_xc_and_xs
+		      (fun xc xs ->
+			 let amount = Squeeze_xen.free_memory_range ~xc ~xs min max in
+			 debug "reserved %Ld kib for reservation %s" amount reservation_id;
+			 add_reservation xs _service session_id reservation_id (Int64.to_string amount);
+			 [ _kib, Int64.to_string amount; _reservation_id, reservation_id ]
+		      )
+		 ) ()
+	    )
+  end
+  
+
+(* val delete_reservation: reservation_id -> unit *)
+let delete_reservation args = 
+  if not(List.mem_assoc _session_id args)
+  then [ _code, _error_missing_argument_code; _description, _session_id ]
+  else if not(List.mem_assoc _reservation_id args)
+  then [ _code, _error_missing_argument_code; _description, _reservation_id ]
+  else begin
+    let session_id = List.assoc _session_id args 
+    and reservation_id = List.assoc _reservation_id args in
+    Debug.with_thread_associated (Printf.sprintf "delete_reservation(%s)" reservation_id)
+      (fun () ->
+	 with_xc_and_xs
+	   (fun xc xs ->
+	      del_reservation xs _service session_id reservation_id;
+	      []
+	   )
+      ) ()
+  end
+
+(* val transfer_reservation_to_domain: session_id -> reservation_id -> domid -> unit *)
+let transfer_reservation_to_domain args = 
+  if not(List.mem_assoc _session_id args)
+  then [ _code, _error_missing_argument_code; _description, _session_id ]
+  else if not(List.mem_assoc _reservation_id args)
+  then [ _code, _error_missing_argument_code; _description, _reservation_id ]
+  else if not(List.mem_assoc _domid args)
+  then [ _code, _error_missing_argument_code; _description, _domid ]
+  else begin
+    let session_id = List.assoc _session_id args 
+    and reservation_id = List.assoc _reservation_id args 
+    and domid = int_of_string (List.assoc _domid args) in
+    try
+      Debug.with_thread_associated 
+        (Printf.sprintf "transfer_reservation_to_domain(%s, %d)" reservation_id domid)
+	(fun () ->
+	   with_xc_and_xs
+	     (fun xc xs ->
+		let kib = xs.Xs.read (reservation_path _service session_id reservation_id) in
+		(* This code is single-threaded, no need to make this transactional: *)
+		xs.Xs.write (xs.Xs.getdomainpath domid ^ "/memory/initial-reservation") kib;
+		maybe
+		  (fun maxmem -> Squeeze_xen.Domain.set_maxmem_noexn (xc, xs) domid maxmem)
+		  (try Some (Int64.of_string kib) with _ -> None);
+		del_reservation xs _service session_id reservation_id;
+		[]
+	     )
+	) ()
+    with Xenbus.Xb.Noent ->
+      [ _code, _error_unknown_reservation; _description, reservation_id ]
+  end
+
+(* val balance_memory: unit -> unit *)
+let balance_memory args = 
+  Debug.with_thread_associated "balance"
+    (fun () ->
+       with_xc_and_xs
+	 (fun xc xs ->
+	    Squeeze_xen.balance_memory ~xc ~xs
+	 )
+    ) ();
+  []
+
+(* val reopen_logs: unit -> unit *)
+let reopen_logs _ = 
+  debug "Reopening logfiles";
+  Logs.reopen ();
+  debug "Logfiles reopened";
+  []
+
+  
+let function_table = 
+  let boo str : Rpc.handler = fun _ ->
+    debug "Prevent calling '%s'" str; 
+    [] in
+  [
+  "echo", (fun x -> x);
+  _login, login;
+  _reserve_memory, reserve_memory;
+  _reserve_memory_range,           (boo "reserve_memory_range");
+  _transfer_reservation_to_domain, (boo "transfer_reservation_to_domain");
+  _delete_reservation,             (boo "delete_reservation");
+  _balance_memory,                 (boo "balance_memory");
+  _reopen_logs, reopen_logs;
+]
+
+(** Called periodically to look for unbalanced memory and take corrective action *)
+let idle_callback ~xc ~xs () = 
+  (* TODO: remove call of balance_memory *)
+  if Squeeze_xen.is_host_memory_unbalanced ~xc ~xs
+  then Debug.with_thread_associated "auto-balance" (fun () -> 
+          debug "autobalancing of memory is disabled!!!";
+          (*Squeeze_xen.balance_memory ~xc ~xs *)
+  ) ()
+  
+let _ = 
+  let pidfile = ref default_pidfile in
+  let daemonize = ref false in
+ 
+  Arg.parse (Arg.align [
+	       "-debug", Arg.Set print_debug, Printf.sprintf "Set debug to stdout rather than log file (default %s)" log_file_path;
+	       "-daemon", Arg.Set daemonize, "Create a daemon";
+	       "-pidfile", Arg.Set_string pidfile, Printf.sprintf "Set the pid file (default \"%s\")" !pidfile;
+	     ])
+    (fun _ -> failwith "Invalid argument")
+    "Usage: serrerd [-daemon] [-pidfile filename]";
+
+  Logs.reset_all [ log_file_path ];
+  begin
+    try Xapi_globs.read_external_config ()
+    with e -> debug "Read global variables config from %s failed: %s. Continue with default setting." Xapi_globs.xapi_globs_conf (Printexc.to_string e)
+  end;
+  debug "Writing reserved-host-memory=%Ld KiB" Squeeze_xen.target_host_free_mem_kib;
+  with_xc_and_xs (fun _ xs -> xs.Xs.write (reserved_host_memory_path _service) (Int64.to_string Squeeze_xen.target_host_free_mem_kib));
+
+  if !daemonize then Unixext.daemonize ();
+
+  Unixext.mkdir_rec (Filename.dirname !pidfile) 0o755;
+  Unixext.pidfile_write !pidfile;
+
+  debug "Starting daemon listening on %s with idle_timeout = %.0f" _service !Xapi_globs.squeezed_balance_check_interval;
+  try
+    with_xc_and_xs (fun xc xs -> Rpc.loop ~xc ~xs ~service:_service ~function_table ~idle_timeout:!Xapi_globs.squeezed_balance_check_interval ~idle_callback:(idle_callback ~xc ~xs) () );
+    debug "Graceful shutdown";
+    exit 0
+  with e ->
+    debug "Caught exception %s" (Printexc.to_string e);
+    exit 1
+
--- a/ocaml/xenops/squeezed_rpc.ml
+++ b/ocaml/xenops/squeezed_rpc.ml
@@ -129,7 +129,9 @@
     debug "Written request using id: %s" id;
     ignore_string (Watch.wait_for ~xs (Watch.value_to_appear (path [ service; _rpc; _response; fn; id ])));
     let arg_keys = listdir xs (path [ service; _rpc; _response; fn; id ]) in
+    debug "arg_keys = %s" (String.concat "," arg_keys);
     let arg_vals = List.map (fun x -> xs.Xs.read (path [ service; _rpc; _response; fn; id; x ])) arg_keys in
+    debug "arg_vals = %s" (String.concat "," arg_vals);
     let args = List.combine arg_keys arg_vals in
     xs.Xs.rm (path [ service; _rpc; _request; fn; id ]);
     xs.Xs.rm (path [ service; _rpc; _response; fn; id ]);
@@ -138,7 +140,10 @@
       if code = _error_missing_argument_code
       then raise (Missing_argument description)
       else if code = _error_unknown_function_code
-      then raise (Unknown_function description)
+      then (
+        debug "Error while executing Squeezed_rpc.client";
+        raise (Unknown_function description)
+      )
       else raise (Error(code, description));
     end else args
       
--- /dev/null
+++ b/ocaml/xenops/serrerd_rpc.ml
@@ -0,0 +1,229 @@
+(*
+ * Copyright (C) 2006-2009 Citrix Systems Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published
+ * by the Free Software Foundation; version 2.1 only. with the special
+ * exception on linking described in file LICENSE.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License for more details.
+ *)
+
+(** Potentially generic xenstore RPC stuff *)
+
+open Pervasiveext
+open Xenops_helpers
+open Xenstore
+
+(* Service-specific: *)
+let _service = "squeezed" (* prefix in xenstore of daemon *)
+let _rpc = "rpc"
+
+(* val login: service_name -> session_id *)
+let _login = "login"
+let _service_name = "service_name"
+let _session_id = "session_id"
+(* val reserve_memory: session_id -> kib -> reservation_id *)
+let _reserve_memory = "reserve-memory" (* _session_id, _kib -> _reservation_id *)
+let _kib = "kib"
+let _reservation_id = "reservation_id"
+(* val reserve_memory_range: session_id -> min -> max -> reservation_id *)
+let _reserve_memory_range = "reserve-memory-range"
+let _min = "min"
+let _max = "max"
+(* val transfer_reservation_to_domain: session_id -> reservation_id -> domid -> unit *)
+let _transfer_reservation_to_domain = "transfer-reservation-to-domain" (* _session_id, _reservation_id, _domid -> unit *)
+let _domid = "domid"
+(* val delete_reservation: session_id -> reservation_id -> unit *)
+let _delete_reservation = "delete-reservation"
+(* val balance_memory: session_id -> unit *)
+let _balance_memory = "balance-memory"
+(* val reopen_logs: session_id -> unit *)
+let _reopen_logs = "reopen-logs"
+
+let _error_cannot_free_this_much_memory_code = "1000"
+let _error_domains_refused_to_cooperate_code = "1001"
+let _error_unknown_reservation               = "1002"
+let _error_invalid_memory_value              = "1003" (* -ve *)
+let _echo = "echo"
+
+(* Generic: *)
+let _pid = "pid"
+let _request = "request"
+let _response = "response"
+let _code = "code"
+let _description = "description"
+let _error_unknown_function_code = "1"
+let _error_exception_code = "2"
+let _error_missing_argument_code = "3"
+
+let print_debug = ref false
+
+module D = Debug.Debugger(struct let name = "xenstore-rpc" end)
+open D
+
+let debug (fmt: ('a , unit, string, unit) format4) =
+  let time_of_float x = 
+    let time = Unix.gmtime x in
+    Printf.sprintf "%04d%02d%02dT%02d:%02d:%02dZ"
+      (time.Unix.tm_year+1900)
+      (time.Unix.tm_mon+1)
+      time.Unix.tm_mday
+      time.Unix.tm_hour
+      time.Unix.tm_min
+      time.Unix.tm_sec in
+  if !print_debug 
+  then Printf.kprintf
+    (fun s -> 
+       Printf.printf "%s %s\n" (time_of_float (Unix.gettimeofday ()))  s; 
+       flush stdout) fmt
+  else Printf.kprintf (fun s -> debug "%s" s) fmt
+
+let path = List.fold_left Filename.concat "/"
+
+let listdir xs path = try List.filter (fun x -> x <> "") (xs.Xs.directory path) with Xenbus.Xb.Noent -> []
+let xs_read xs path = try xs.Xs.read path with Xenbus.Xb.Noent as e -> begin debug "xenstore-read %s returned ENOENT" path; raise e end
+
+exception Server_not_registered
+exception Error of string * string
+exception Missing_argument of string
+exception Unknown_function of string
+
+module Rpc_internal = struct
+  type handler = (string * string) list -> (string * string) list
+
+  let write_request xs service fn args = 
+    let unique_id = Uuid.string_of_uuid (Uuid.make_uuid ()) in
+    let p = path [ service; _rpc; _request; fn; unique_id ] in
+    Xs.transaction xs 
+      (fun t ->
+	 t.Xst.mkdir p;
+	 t.Xst.writev p args
+      );
+    unique_id
+      
+  let write_response xs service fn unique_id args = 
+    let p = path [ service; _rpc; _response; fn; unique_id ] in
+    Xs.transaction xs
+      (fun t ->
+	 t.Xst.mkdir p;
+	 t.Xst.writev p args
+      )
+  let write_error xs service fn unique_id (code, description) = 
+    write_response xs service fn unique_id [ _code, code; _description, description ]
+      
+  let client ~xs ~service ~fn ~args = 
+    (* Check that the server process is present *)
+    begin
+      try
+        debug "Checking path %s:" (path [ service; _pid ]);
+	let pid = int_of_string (xs.Xs.read (path [ service; _pid ])) in
+	debug "Checking serrerd's pid %d" pid;
+	Unix.kill pid 0;
+      with _ ->
+	raise Server_not_registered
+    end;
+    let id = write_request xs service fn args in
+    debug "Written request using id: %s" id;
+    ignore_string (Watch.wait_for ~xs (Watch.value_to_appear (path [ service; _rpc; _response; fn; id ])));
+    let arg_keys = listdir xs (path [ service; _rpc; _response; fn; id ]) in
+    debug "arg_keys = %s" (String.concat "," arg_keys);
+    let arg_vals = List.map (fun x -> xs.Xs.read (path [ service; _rpc; _response; fn; id; x ])) arg_keys in
+    debug "arg_vals = %s" (String.concat "," arg_vals);
+    let args = List.combine arg_keys arg_vals in
+    xs.Xs.rm (path [ service; _rpc; _request; fn; id ]);
+    xs.Xs.rm (path [ service; _rpc; _response; fn; id ]);
+    if List.mem_assoc _code args && (List.mem_assoc _description args) then begin
+      let code = List.assoc _code args and description = List.assoc _description args in
+      if code = _error_missing_argument_code
+      then raise (Missing_argument description)
+      else if code = _error_unknown_function_code
+      then (
+        debug "Error while executing Serrerd_rpc.client";
+        raise (Unknown_function description)
+      )
+      else raise (Error(code, description));
+    end else args
+      
+  (** Return a list of (fn_name, [ unique_id ]) corresponding to unanswered requests *)
+  let list_new_requests xs service =
+    let fns = listdir xs (path [ service; _rpc; _request ]) in
+    let requests_of_fn x = listdir xs (path [ service; _rpc; _request; x ]) in
+    let responses_of_fn x = listdir xs (path [ service; _rpc; _response; x ]) in
+    let new_requests_of_fn x = Listext.List.set_difference (requests_of_fn x) (responses_of_fn x) in
+    List.combine fns (List.map new_requests_of_fn fns)
+      
+      
+  (** Read the request from xenstore and call the given function, trapping all exceptions *)
+  let call_server_fn xs service fn unique_id f =
+    (* Read the args *)
+    try
+      debug "listdir %s"  (path [ service; _rpc; _request; fn; unique_id ]);
+      let arg_keys = listdir xs (path [ service; _rpc; _request; fn; unique_id ]) in
+      let arg_vals = List.map (fun x -> 
+				 debug "read %s" (path [ service; _rpc; _request; fn; unique_id; x ]);
+				 xs.Xs.read (path [ service; _rpc; _request; fn; unique_id; x ])) arg_keys in
+      let args = List.combine arg_keys arg_vals in
+      f args 
+    with e ->
+      let e_string = Printexc.to_string e in
+      debug "Function %s/%s/%s threw exception: %s" service fn unique_id e_string;
+      [ _code, _error_exception_code;
+	_description, e_string ]
+	
+  (** Process the given request, throws no exceptions *)
+  let process_generic_fn xs service fn function_table unique_id = 
+    debug "Request for %s/%s/%s" service fn unique_id;
+    if not (List.mem_assoc fn function_table) 
+    then write_error xs service fn unique_id (_error_unknown_function_code, fn)
+    else 
+      let f = List.assoc fn function_table in
+      let results = call_server_fn xs service fn unique_id f in
+      write_response xs service fn unique_id results
+	
+  (** Service requests forever *)
+  let loop ~service ~function_table ~xc ~xs ?(idle_timeout=(-1.)) ?(idle_callback=(fun () -> ())) () = 
+    (* Write our pid to the store so clients can see we are alive *)
+    xs.Xs.write (path [ service; _pid ]) (string_of_int (Unix.getpid ()));
+
+    xs.Xs.watch (path [ service; _rpc; _request ])  "X";
+    
+    let process_new_requests () = 
+      let fns_ids = list_new_requests xs service in
+      List.iter (fun (fn, ids) -> List.iter (process_generic_fn xs service fn function_table) ids) fns_ids in
+    
+    (* list the requests which arrived before our watch was established *)
+    process_new_requests ();
+    while true do
+      if Xs.has_watchevents xs then begin
+		(* Drain the watch event queue *)
+		while Xs.has_watchevents xs do
+		  ignore(Xs.get_watchevent xs)
+		done
+      end else begin
+		(* Nothing in the queue, wait for an event on the fd *)
+		let r, _, _ = Unix.select [ Xs.get_fd xs ] [] [] idle_timeout in
+		if r = []
+		then idle_callback ()
+		else ignore(Xs.read_watchevent xs);
+      end;
+	  (* We think there is some work to do *)
+	  process_new_requests ()
+    done
+end
+  
+
+module Rpc = (Rpc_internal: Squeezed_rpc.RPC)
+
+
+
+
+
+
+
+
+
+
--- a/ocaml/xapi/xapi_vm.ml
+++ b/ocaml/xapi/xapi_vm.ml
@@ -233,16 +233,19 @@
 						debug "start: bringing up domain in the paused state";
 						Vmops.start_paused
 							~progress_cb:(TaskHelper.set_progress ~__context) ~pcidevs:None ~__context ~vm ~snapshot;
+                                                debug "%d" 1;
 						delete_guest_metrics ~__context ~self:vm;
-
+                                                debug "%d" 2;
 						let localhost = Helpers.get_localhost ~__context in
+                                                debug "%d" 3;
 						Helpers.call_api_functions ~__context
 							(fun rpc session_id -> Client.VM.atomic_set_resident_on rpc session_id vm localhost);
-
+                                                debug "%d" 4;
 						(* Populate last_boot_CPU_flags with the vendor and feature set of the host CPU. *)
 						let host = Db.VM.get_resident_on ~__context ~self:vm in
+                                                debug "%d" 5;
 						Xapi_vm_helpers.populate_cpu_flags ~__context ~vm ~host;
-
+                                                debug "%d" 6;
 						if paused then
 							Db.VM.set_power_state ~__context ~self:vm ~value:`Paused
 						else (
--- a/ocaml/xapi/xapi_vm_migrate.ml
+++ b/ocaml/xapi/xapi_vm_migrate.ml
@@ -697,6 +697,11 @@
 
 (** HTTP handler to receive the live memory image *)
 let handler req fd _ =
+  let () = 
+    let s = List.map (fun (a,b) -> sprintf "(%s,%s)" a b) req.Http.Request.query in
+    let s2 = String.concat ";" s in
+    DD.debug "\n[ %s ]\n" s2
+  in
   let safe_lookup key list =
     if not (List.mem_assoc key list) then begin
 	error "Failed to find key %s (list was [ %s ])"
--- a/ocaml/xapi/memory_control.ml
+++ b/ocaml/xapi/memory_control.ml
@@ -54,7 +54,10 @@
       error "Unexpected exception talking to ballooning daemon: %s" (ExnHelper.string_of_exn e);
       raise e
 
-let call_daemon xs fn args = Squeezed_rpc.Rpc.client ~xs ~service:Squeezed_rpc._service ~fn ~args
+let call_daemon xs fn args =
+  debug "Calling daemon '%s'" Squeezed_rpc._service;
+  Squeezed_rpc.Rpc.client ~xs ~service:Squeezed_rpc._service ~fn ~args
+
 let ignore_results (_: (string * string) list) = ()
 
 (** Log into the ballooning service (on every xapi start) *)
--- a/ocaml/xenops/squeeze.ml
+++ b/ocaml/xenops/squeeze.ml
@@ -479,6 +479,29 @@
 exception Cannot_free_this_much_memory of int64 * int64 (** even if we balloon everyone down we can't free this much *)
 exception Domains_refused_to_cooperate of int list (** these VMs didn't release memory and we failed *)
 
+let force_change_host_free_memory ?fistpoints io required_mem_kib success_condition = 
+  if io.verbose 
+  then debug "force_change_host_free_memory required_mem = %Ld KiB" required_mem_kib;
+
+  let acc = ref (Squeezer.make ()) in
+  let _, host = io.make_host () in
+  let t = io.gettimeofday () in
+  let _,_,_,result =
+      Squeezer.one_iteration ?fistpoints io.verbose success_condition !acc host required_mem_kib t in
+  match result with
+    | Success ->
+	if io.verbose
+	then debug "Success: Forcing host free memory = %Ld KiB" required_mem_kib;
+        true
+    | Failed _ ->
+	if io.verbose
+	then debug "Failed to free %Ld KiB of memory: operation impossible within current dynamic_min limits of balloonable domains" required_mem_kib;
+	raise (Cannot_free_this_much_memory (required_mem_kib, host.free_mem_kib))
+    | AdjustTargets actions ->
+        if io.verbose
+        then debug "Can't free %Ld KiB: some domains need squeezing" required_mem_kib;
+        false
+              
 let change_host_free_memory ?fistpoints io required_mem_kib success_condition = 
   (* XXX: debugging *)
   if io.verbose 
--- a/ocaml/xenops/squeeze_xen.ml
+++ b/ocaml/xenops/squeeze_xen.ml
@@ -451,7 +451,15 @@
 
 let free_memory ~xc ~xs required_mem_kib = 
   let io = io ~verbose:true ~xc ~xs in
-  Squeeze.change_host_free_memory io (required_mem_kib +* io.Squeeze.target_host_free_mem_kib) (fun x -> x >= (required_mem_kib +* io.Squeeze.target_host_free_mem_kib))
+  Squeeze.change_host_free_memory io 
+    (required_mem_kib +* io.Squeeze.target_host_free_mem_kib) 
+    (fun x -> x >= (required_mem_kib +* io.Squeeze.target_host_free_mem_kib))
+
+let force_free_memory ~xc ~xs required_mem_kib = 
+  let io = io ~verbose:true ~xc ~xs in
+  Squeeze.force_change_host_free_memory io 
+    (required_mem_kib +* io.Squeeze.target_host_free_mem_kib) 
+    (fun x -> x >= (required_mem_kib +* io.Squeeze.target_host_free_mem_kib))
 
 let free_memory_range ~xc ~xs min_kib max_kib =
   let io = io ~verbose:true ~xc ~xs in
--- a/ocaml/xenops/squeezed_state.ml
+++ b/ocaml/xenops/squeezed_state.ml
@@ -21,7 +21,10 @@
 let reserved_host_memory_path service = path [ ""; service; "reserved-host-memory" ]
 
 (** Path where a specific reservation is stored *)
-let reservation_path service session_id reservation_id = path [ ""; service; "state"; session_id; reservation_id ]
+let reservation_path service session_id reservation_id = 
+  let ans = path [ ""; service; "state"; session_id; reservation_id ] in
+  debug "reservation_path says '%s'" ans;
+  ans
 
 let add_reservation xs service session_id reservation_id kib = 
   xs.Xs.write (reservation_path service session_id reservation_id) kib
@@ -36,3 +39,11 @@
     let rids = listdir xs (path [ ""; service; "state"; session_id ]) in
     List.fold_left Int64.add 0L (List.map (fun r -> Int64.of_string (xs_read xs (path [ ""; service; "state"; session_id; r]))) rids) in
   List.fold_left Int64.add 0L (List.map session_total session_ids)
+
+(* Get list of reserved parts *)
+let list_reservations xs service : string list list =
+  let session_ids = listdir xs (path [ ""; service; "state" ]) in
+  let session_total session_id = 
+    let rids = listdir xs (path [ ""; service; "state"; session_id ]) in
+    List.map (fun r ->  (xs_read xs (path [ ""; service; "state"; session_id; r]))) rids in
+  List.map session_total session_ids
